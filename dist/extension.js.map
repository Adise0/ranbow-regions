{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://rainbowregions/./src/extension.ts","webpack://rainbowregions/external commonjs \"vscode\"","webpack://rainbowregions/webpack/bootstrap","webpack://rainbowregions/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\n\ninterface Tag {\n  range: vscode.Range;\n  text: string;\n  scope: number;\n  type: \"start\" | \"end\";\n  color?: string;\n  index: number;\n}\n\nlet decorationTypes: { [color: string]: vscode.TextEditorDecorationType } = {};\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log(\"Color Regions extension activated cool!\");\n\n  const colorRegions = (document: vscode.TextDocument) => {\n    // console.log(\"COLORING REGIONS\");\n    const editor = vscode.window.activeTextEditor;\n    if (!editor || editor.document !== document) {\n      return;\n    }\n\n    const text = document.getText();\n    const regionRegex = /\\/\\/\\s*#region|\\/\\/\\s*#endregion/g;\n    const colors = [\n      \"#F28C28\",\n      \"#4682B4\",\n      \"#D2691E\",\n      \"#8A2BE2\",\n      \"#E9967A\",\n      \"#3CB371\",\n      \"#FFD700\",\n      \"#00f0ff\",\n    ];\n    let match;\n\n    let currentScope = 0;\n    const allTags: Tag[] = [];\n\n    while ((match = regionRegex.exec(text)) !== null) {\n      const matchPosition = document.positionAt(match.index);\n      const line = document.lineAt(matchPosition.line);\n\n      const lineRange = new vscode.Range(line.range.start, line.range.end);\n      const type = line.text.includes(\"#region\") ? \"start\" : \"end\";\n\n      if (type === \"start\") {\n        currentScope++;\n      }\n\n      const index = allTags.filter(\n        (allTag) => allTag.scope === currentScope && allTag.type === type\n      ).length;\n\n      const tag: Tag = {\n        range: lineRange,\n        text: line.text,\n        scope: currentScope,\n        index: index,\n        type,\n      };\n\n      if (type === \"end\") {\n        currentScope--;\n      }\n\n      allTags.push(tag);\n    }\n\n    allTags.sort((a, b) => {\n      if (a.type === \"start\" && b.type === \"end\") {\n        return -1;\n      }\n      if (a.type === \"end\" && b.type === \"start\") {\n        return 1;\n      }\n      return 0;\n    });\n\n    let currentColor = 0;\n    const colorDecorations: { [color: string]: vscode.DecorationOptions[] } =\n      {};\n\n    allTags.forEach((tag) => {\n      if (tag.type === \"start\") {\n        const endTag = allTags.find(\n          (endTag) =>\n            endTag.type === \"end\" &&\n            endTag.scope === tag.scope &&\n            endTag.index === tag.index\n        );\n\n        const color = endTag ? colors[currentColor] : \"#ff0000\";\n\n        // Create or get the decoration type for the current color\n        if (!decorationTypes[color]) {\n          decorationTypes[color] = vscode.window.createTextEditorDecorationType(\n            {\n              color: color,\n            }\n          );\n        }\n\n        // Initialize color decorations array if not already\n        if (!colorDecorations[color]) {\n          colorDecorations[color] = [];\n        }\n\n        // Apply the decoration to the start tag\n        colorDecorations[color].push({\n          range: tag.range,\n        });\n\n        if (endTag) {\n          // Apply the decoration to the end tag with hover message\n          colorDecorations[color].push({\n            range: endTag.range,\n            renderOptions: {\n              after: {\n                contentText: tag.text\n                  .replace(\"region\", \"\")\n                  .replace(\"#\", \"\")\n                  .replace(\"//\", \"\"),\n              },\n            },\n          });\n        }\n\n        currentColor++;\n        if (currentColor === colors.length) {\n          currentColor = 0;\n        }\n      }\n    });\n\n    // Clear previous decorations\n    for (const color in decorationTypes) {\n      editor.setDecorations(decorationTypes[color], []);\n    }\n\n    // Apply current decorations\n    for (const color in colorDecorations) {\n      editor.setDecorations(decorationTypes[color], colorDecorations[color]);\n    }\n  };\n\n  vscode.workspace.onDidChangeTextDocument((event) => {\n    console.log(\"ON CHANGE TEXT\");\n    colorRegions(event.document);\n  });\n\n  vscode.window.onDidChangeActiveTextEditor((editor) => {\n    console.log(\"ON CHANGE ACTIVE\");\n    if (editor) {\n      colorRegions(editor.document);\n    }\n  });\n\n  vscode.workspace.onDidOpenTextDocument((document) => {\n    if (document.fileName.includes(\".git\")) {\n      return;\n    }\n    vscode.commands.executeCommand(\"editor.foldAllMarkerRegions\");\n  });\n\n  if (vscode.window.activeTextEditor) {\n    colorRegions(vscode.window.activeTextEditor.document);\n  }\n}\n\nexport function deactivate() {\n  // Clean up decorations\n  for (const color in decorationTypes) {\n    decorationTypes[color].dispose();\n  }\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","colorRegions","document","editor","vscode","window","activeTextEditor","text","getText","regionRegex","colors","match","currentScope","allTags","exec","matchPosition","positionAt","index","line","lineAt","lineRange","Range","range","start","end","type","includes","filter","allTag","scope","length","tag","push","sort","a","b","currentColor","colorDecorations","forEach","endTag","find","color","decorationTypes","createTextEditorDecorationType","renderOptions","after","contentText","replace","setDecorations","workspace","onDidChangeTextDocument","event","onDidChangeActiveTextEditor","onDidOpenTextDocument","fileName","commands","executeCommand","dispose","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}